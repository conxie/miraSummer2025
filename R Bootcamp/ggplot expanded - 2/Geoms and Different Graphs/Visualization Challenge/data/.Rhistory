summarize(across(where(is.factor), mean))
NFLScores2011 %>%
mutate(Week = factor(Week),
Year = factor(Year)) %>%
summarise_if(is.numeric, mean, na.rm = TRUE)
library(tidyverse)
# Modify the file path in the code below to properly load the file
load("~/Desktop/GitHub/R Bootcamp/Summarizing and Transforming Data - 4/Transformations_data/penguins_sep.RData")
# Modify the file path in the code below to properly load the file
load("~/Desktop/GitHub/R Bootcamp/Summarizing and Transforming Data - 4/Transformations_data/join_practice.RData")
penguins_set1 = slice_sample(penguins1, n = 20)
penguins_set2 = slice_sample(penguins1, n = 20)
table4a %>%
pivot_longer(country_1:population_3,
names_to = stats,
values_to = correct)
table4a
table4a %>%
pivot_longer(cols = c(`1999`, `2000`),
names_to = "year",
values_to = "population_count")
table2
table2 %>%
pivot_wider(cols = c('1999', '2000'),
names_to = "cases",
values_to = "population")
table2 %>%
pivot_wider(cols = c('1999', '2000'),
names_to = "type",
values_to = "population")
table2 %>%
pivot_wider(cols = c('cases', 'population'),
names_to = "year",
values_to = "count")
table2 %>%
pivot_wider(cols = c("type"),
names_to = "year",
values_to = "count")
table2 %>%
pivot_wider(names_from = type, values_from = count)
View(penguins1)
bind_rows(penguins1, penguins2)
bind_rows(penguins1, penguins2) %>%
bind_rows(penguins3)
inner_join(x, y)
left_join(x, y)
right_join(x, y)
full_join(x, y)
union(penguins_set1, penguins_set2)
intersect(penguins_set1, penguins_set2)
setdiff(penguins_set1, penguins_set2)
#install.packages("tidyverse")
#install.packages("haven")
#install.packages("readr")
#install.packages("readxl")
#install.packages("openxlsx")
library(tidyverse)
library(haven)
library(readr)
library(readxl)
library(openxlsx)
#hint: use read.csv() to load in the file
#additional hint: customfilename = read.csv('filepath')
ASDScreeningData = read.csv('/Users/miramateo/Desktop/GitHub/ASDScreeningDataChildren.csv')
#hint: use view()
view(ASDScreeningData)
#Data manipulation
#make it so that Class.ASD in the dataframe is not binary ("YES/NO"), but numeric (1/0). There are many ways which this can be done. ifelse() is one way.
#try to find more ways on how to convert binary to numeric
ASDScreeningData = ASDScreeningData %>%
mutate(Class.ASD = ifelse(Class.ASD == "YES", 1, 0))
ASDScreeningData = ASDScreeningData %>%
mutate(austim = ifelse(austim == "yes", 1, 0))
# Fit the logistic regression model
#my_model = glm(outcome ~ predictor1 + predictor2, family = binomial, data = customfilename)
my_model = glm(austim ~ age, family = binomial, data = ASDScreeningData)
# View the model summary
summary(my_model)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
#make a bar chart that looks at count
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#see if any other graphs would be a good fit to represent the data
#Jitter Plot
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter()
#use ...count... to show proportion (found in 193L textbook)
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
View(countASD)
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter()
# Try your best! This one is less handholdy
#chi square test
#https://www.datacamp.com/tutorial/chi-square-test-r
# Install and load the package
#install.packages('dplyr')
#library(dplyr)
# Select the columns of interest
selected_data <- ASDScreeningData %>% select(age, Class.ASD)
# Create a contingency table for Highest educational level and Anemia level
contingency_table <- table(selected_data$age, selected_data$Class.ASD)
# View the contingency table
print(contingency_table)
# Perform chi-square test
chi_square_test <- chisq.test(contingency_table)
# View the results
print(chi_square_test)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
countASD = ASDScreeningData %>%
group_by(jundice) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = jundice , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = jundice)) +
geom_jitter()
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = jundice)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
#make a bar chart that looks at count
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#see if any other graphs would be a good fit to represent the data
#Jitter Plot
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter()
#use ...count... to show proportion (found in 193L textbook)
#install.packages("tidyverse")
#install.packages("haven")
#install.packages("readr")
#install.packages("readxl")
#install.packages("openxlsx")
library(tidyverse)
library(haven)
library(readr)
library(readxl)
library(openxlsx)
#hint: use read.csv() to load in the file
#additional hint: customfilename = read.csv('filepath')
ASDScreeningData = read.csv('/Users/miramateo/Desktop/GitHub/ASDScreeningDataChildren.csv')
#hint: use view()
view(ASDScreeningData)
#Data manipulation
#make it so that Class.ASD in the dataframe is not binary ("YES/NO"), but numeric (1/0). There are many ways which this can be done. ifelse() is one way.
#try to find more ways on how to convert binary to numeric
ASDScreeningData = ASDScreeningData %>%
mutate(Class.ASD = ifelse(Class.ASD == "YES", 1, 0))
ASDScreeningData = ASDScreeningData %>%
mutate(austim = ifelse(austim == "yes", 1, 0))
# Fit the logistic regression model
#my_model = glm(outcome ~ predictor1 + predictor2, family = binomial, data = customfilename)
my_model = glm(austim ~ age, family = binomial, data = ASDScreeningData)
# View the model summary
summary(my_model)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
#make a bar chart that looks at count
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#see if any other graphs would be a good fit to represent the data
#Jitter Plot
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter()
#use ...count... to show proportion (found in 193L textbook)
# Try your best! This one is less handholdy
#chi square test
#https://www.datacamp.com/tutorial/chi-square-test-r
# Install and load the package
#install.packages('dplyr')
#library(dplyr)
# Select the columns of interest
selected_data <- ASDScreeningData %>% select(age, Class.ASD)
# Create a contingency table for Highest educational level and Anemia level
contingency_table <- table(selected_data$age, selected_data$Class.ASD)
# View the contingency table
print(contingency_table)
# Perform chi-square test
chi_square_test <- chisq.test(contingency_table)
# View the results
print(chi_square_test)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
countASD = ASDScreeningData %>%
group_by(jundice) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = jundice , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = jundice)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
#make a bar chart that looks at count
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#see if any other graphs would be a good fit to represent the data
#Jitter Plot
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#use ...count... to show proportion (found in 193L textbook)
load("~/Desktop/GitHub/ASDScreeningNotebook.RData")
#Data manipulation
#make it so that Class.ASD in the dataframe is not binary ("YES/NO"), but numeric (1/0). There are many ways which this can be done. ifelse() is one way.
#try to find more ways on how to convert binary to numeric
ASDScreeningData = ASDScreeningData %>%
mutate(Class.ASD = ifelse(Class.ASD == "YES", 1, 0))
#hint: use read.csv() to load in the file
#additional hint: customfilename = read.csv('filepath')
ASDScreeningData = read.csv('/Users/miramateo/Desktop/GitHub/ASDScreeningDataChildren.csv')
#hint: use view()
view(ASDScreeningData)
#Data manipulation
#make it so that Class.ASD in the dataframe is not binary ("YES/NO"), but numeric (1/0). There are many ways which this can be done. ifelse() is one way.
#try to find more ways on how to convert binary to numeric
ASDScreeningData = ASDScreeningData %>%
mutate(Class.ASD = ifelse(Class.ASD == "YES", 1, 0))
ASDScreeningData = ASDScreeningData %>%
mutate(austim = ifelse(austim == "yes", 1, 0))
# Fit the logistic regression model
#my_model = glm(outcome ~ predictor1 + predictor2, family = binomial, data = customfilename)
my_model = glm(austim ~ age, family = binomial, data = ASDScreeningData)
# View the model summary
summary(my_model)
#install.packages("tidyverse")
#install.packages("haven")
#install.packages("readr")
#install.packages("readxl")
#install.packages("openxlsx")
library(tidyverse)
library(haven)
library(readr)
library(readxl)
library(openxlsx)
#hint: use read.csv() to load in the file
#additional hint: customfilename = read.csv('filepath')
ASDScreeningData = read.csv('/Users/miramateo/Desktop/GitHub/ASDScreeningDataChildren.csv')
#hint: use view()
view(ASDScreeningData)
#Data manipulation
#make it so that Class.ASD in the dataframe is not binary ("YES/NO"), but numeric (1/0). There are many ways which this can be done. ifelse() is one way.
#try to find more ways on how to convert binary to numeric
ASDScreeningData = ASDScreeningData %>%
mutate(Class.ASD = ifelse(Class.ASD == "YES", 1, 0))
ASDScreeningData = ASDScreeningData %>%
mutate(austim = ifelse(austim == "yes", 1, 0))
# Fit the logistic regression model
#my_model = glm(outcome ~ predictor1 + predictor2, family = binomial, data = customfilename)
my_model = glm(austim ~ age, family = binomial, data = ASDScreeningData)
# View the model summary
summary(my_model)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
#make a bar chart that looks at count
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#see if any other graphs would be a good fit to represent the data
#Jitter Plot
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#use ...count... to show proportion (found in 193L textbook)
# Try your best! This one is less handholdy
#chi square test
#https://www.datacamp.com/tutorial/chi-square-test-r
# Install and load the package
#install.packages('dplyr')
#library(dplyr)
# Select the columns of interest
selected_data <- ASDScreeningData %>% select(age, Class.ASD)
# Create a contingency table for Highest educational level and Anemia level
contingency_table <- table(selected_data$age, selected_data$Class.ASD)
# View the contingency table
print(contingency_table)
# Perform chi-square test
chi_square_test <- chisq.test(contingency_table)
# View the results
print(chi_square_test)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
countASD = ASDScreeningData %>%
group_by(jundice) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = jundice , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = jundice)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
#install.packages("tidyverse")
#install.packages("haven")
#install.packages("readr")
#install.packages("readxl")
#install.packages("openxlsx")
library(tidyverse)
library(haven)
library(readr)
library(readxl)
library(openxlsx)
#hint: use read.csv() to load in the file
#additional hint: customfilename = read.csv('filepath')
ASDScreeningData = read.csv('/Users/miramateo/Desktop/GitHub/ASDScreeningDataChildren.csv')
#hint: use view()
view(ASDScreeningData)
#Data manipulation
#make it so that Class.ASD in the dataframe is not binary ("YES/NO"), but numeric (1/0). There are many ways which this can be done. ifelse() is one way.
#try to find more ways on how to convert binary to numeric
ASDScreeningData = ASDScreeningData %>%
mutate(Class.ASD = ifelse(Class.ASD == "YES", 1, 0))
ASDScreeningData = ASDScreeningData %>%
mutate(austim = ifelse(austim == "yes", 1, 0))
# Fit the logistic regression model
#my_model = glm(outcome ~ predictor1 + predictor2, family = binomial, data = customfilename)
my_model = glm(austim ~ age, family = binomial, data = ASDScreeningData)
# View the model summary
summary(my_model)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
#make a bar chart that looks at count
countASD = ASDScreeningData %>%
group_by(age) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = age , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#see if any other graphs would be a good fit to represent the data
#Jitter Plot
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = age)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Age",
x = "Age",
y = "Autism Count"
) +
theme_minimal()
#use ...count... to show proportion (found in 193L textbook)
# Try your best! This one is less handholdy
#chi square test
#https://www.datacamp.com/tutorial/chi-square-test-r
# Install and load the package
#install.packages('dplyr')
#library(dplyr)
# Select the columns of interest
selected_data <- ASDScreeningData %>% select(age, Class.ASD)
# Create a contingency table for Highest educational level and Anemia level
contingency_table <- table(selected_data$age, selected_data$Class.ASD)
# View the contingency table
print(contingency_table)
# Perform chi-square test
chi_square_test <- chisq.test(contingency_table)
# View the results
print(chi_square_test)
#Make a graph.
#https://psyc193l.github.io/index.html <-- Ch 7 will help you figure out
countASD = ASDScreeningData %>%
group_by(jundice) %>%
count(Class.ASD) %>%
filter(Class.ASD == 1)
countASD %>%
ggplot(aes(x = jundice , y = n)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
ASDScreeningData %>%
ggplot(aes(y = Class.ASD, x = jundice)) +
geom_jitter() +
labs(
title = "Count of Autism Diagnoses by Jaundice Diagnoses",
x = "Jaundice",
y = "Autism Count"
) +
theme_minimal()
